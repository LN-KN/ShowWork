@page "/fetchdata"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Мои работы</PageTitle>

@if (works == null)
{
    <p><em>Загрузка работ...</em></p>
}
else
{
    <div class="profile-works">
        <div class="work-block">
            <div class="profile-portfolio">
                     <!-- ПЕРВАЯ РАБОТА -->
                     <div class="work create-work" @onclick="RedirectToEdit">
                         <a>
                            <div class="create-work-block">
                                <img src="images/new-work.svg">
                                <h3>Создать работу</h3>
                                <img src="images/new-work-arrow.svg">
                            </div>
                        </a>
                     </div>
        <button id="button" class="button"  style="display:none;">Добавить</button>
        @foreach (var work in works)
        {
            if (work.CategoryOfWork >= 0 && work.CategoryOfWork < categoryNames.Length)
            {
                <div class="work">
                    <div class="portfolio-info">
                        <div class="author">
                            <img src="@work.UserImagePath"
                                 height="32.54"
                                 width="36.5">
                            <p>@work.UserName @work.UserSurname</p>
                        </div>
                        <div>
                            <p class="work-name">@work.Title</p>
                            <p class="rating">@Math.Round(work.MiddleGrade,2)</p>
                        </div>
                    </div>
                    <a href="/work/@work.WorkId"> <img src="/images/image 7.png" /></a>
                </div>
            }
        }
            </div>
        </div>
    </div>
}

@code {
    internal static List<Work>? works = null;
    private string[] categoryNames = new string[]
    {
        "Аналитика",
        "Разработка",
        "Фотография",
        "UI/UX дизайн",
        "Графический дизайн",
        "Другое"
    };
    private Work editItem = new Work();

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<List<Work>>("works/my");
        if(result != null)
            works = result.ToList();
    }

    public class Work
    {
        public int WorkId { get; set; }
        public int UserId { get; set; }

        public string UserName { get; set; }
        public string UserSurname { get; set; }
        public string UserImagePath { get; set; }
        public double MiddleGrade { get; set; }

        public int? CategoryOfWork { get; set; } = 0;
        public int? PatternOfWork { get; set; } = 0;
        public string Title { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string TextBlockOne { get; set; } = null!;
        public string TextBlockTwo { get; set; } = null!;
        public string TextBlockThree { get; set; } = null!;
        public string ImagePath { get; set; }
        public int Status { get; set; } = 0;
        public int LikesCount { get; set; } = 0;
        public int CommentsCount { get; set; } = 0;
        public DateTime? Published { get; set; }
    }
    private void RedirectToEdit()
    {
        NavigationManager.NavigateTo("/edit", true);
    }
}
