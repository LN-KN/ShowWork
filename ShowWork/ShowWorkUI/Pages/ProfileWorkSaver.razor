@page "/fetchdata"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.JSInterop
@using System.Net.Http.Headers
@inject IJSRuntime JS
@using static ProfileWorkEditor

<section class="work-create-info">
    @if (!IsCompleted)
    {
        <div style="color:red; margin-left: auto; margin-right:auto;display:table;">
            <p>Вы не заполнили обязательные поля либо не выбрали категорию</p>
        </div>
    }
    <div class="first-row">
    <label>
       <input type="text" class="work-create-name" @bind="editItem.Title" placeholder="Введите заголовок...">
    </label>
        <button class="download" type="button" @ref="downloadButton" @onclick="SaveItem">Загрузить</button>
    </div>
    <label>
        <textarea class="work-description" @bind="editItem.Description" placeholder="Введите описание..."></textarea>
    </label>
    <div class="category_buttons">
        <button class="btnCategory" data-index="0">Аналитика</button>
        <button class="btnCategory" data-index="1">Разработка</button>
        <button class="btnCategory" data-index="2">Фотография</button>
        <button class="btnCategory" data-index="3">UI/UX дизайн</button>
        <button class="btnCategory" data-index="4">Графический дизайн</button>
        <button class="btnCategory" data-index="5">Другое</button>
    </div>
    <figure class="hashtags_label">
        <figcaption>Добавьте тегов</figcaption>
        <label>
            <input type="text" placeholder="#AI #Дизайн" @bind="tags">
        </label>
    </figure>
    <div class="work-designs">
        <div class="work-designs-links">
            <a href="#analytics" data-index="0" class="first-label layout-link">Аналитика</a>
            <a href="#development" data-index="1" class="layout-link">Разработка</a>
            <a href="#photography" data-index="2" class="layout-link">Фотография</a>
            <a href="#designing" data-index="3" class="layout-link">Дизайн</a>
            <a href="#another" data-index="4" class="layout-link">Другое</a>
        </div>
    </div>
    

</section>
<section class="tab-work-content">
    <div class="create-work-block" id="analytics">
        <textarea class="addtext-analytics" @bind="editItem.TextBlockOne" oninput="autoResizeAnalytics(this)" rows="5" placeholder="Добавьте текст..."></textarea>

        <div class="slideshow-container">
            <!-- Full-width images with number and caption text -->
            @foreach (var image in filesBase64)
            {
                <div class="mySlides1 fade">
                    <img src="data:@image.contentType;base64,@image.base64data">
                </div>
            }
            @if (filesBase64.Count() < 10)
            {
                <label for="file-input-analytics">
                    <div class="mySlides1 fade">
                        <img src="images/image_placeholder.jpg">
                    </div>
                </label>
                <InputFile id="file-input-analytics" type="file" name="file-input-analytics" OnChange="OnChangeAny" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            <a class="prev" onclick="plusSlidesAnalytics(-1)">&#10094;</a>
            <a class="next" onclick="plusSlidesAnalytics(1)">&#10095;</a>
        </div>
        <br>

        <!-- The dots/circles -->
        <div style="text-align:center">
            @for (var i = 1; i < filesBase64.Count() + 2; i++)
            {
                <span class="dot1" onclick="currentSlideAnalytics(@i)"></span>
            }
        </div>

        <script>
            var slideIndex = 1;
            showSlidesAnalytics(slideIndex);

            // Next/previous controls
            function plusSlidesAnalytics(n) {
                showSlidesAnalytics(slideIndex += n);
            }

            // Thumbnail image controls
            function currentSlideAnalytics(n) {
                showSlidesAnalytics(slideIndex = n);
            }

            function showSlidesAnalytics(n) {
                var i;
                var slides = document.getElementsByClassName("mySlides1");
                var dots = document.getElementsByClassName("dot1");
                if (n > slides.length) {
                    slideIndex = 1;
                }
                if (n < 1) {
                    slideIndex = slides.length;
                }
                for (i = 0; i < slides.length; i++) {
                    slides[i].style.display = "none";
                }
                for (i = 0; i < dots.length; i++) {
                    dots[i].className = dots[i].className.replace(" active", "");
                }
                slides[slideIndex - 1].style.display = "block";
                dots[slideIndex - 1].className += " active";
            }
            function autoResizeAnalytics(elem) {
                elem.style.height = '100';
                elem.style.height = (elem.scrollHeight + 10) + 'px';
            }
           
        </script>
    </div>


    <div class="create-work-block" id="development">
        <textarea type="text" class="addtext-development" @bind="editItem.TextBlockOne" placeholder="Добавьте текст..."></textarea>
        <div class="codetext-development">
            <textarea id="editor" onchange="Load()"> </textarea>
        </div>
        
        <script type="text/javascript">
            var editor = CodeMirror.fromTextArea
                (document.getElementById('editor'), {
                    mode: "xml",
                    theme: "eclipse",
                    autoCloseTags: true,
                    tabSize:5,
                    lineNumbers:true
                });
            editor.eachLine(line => {
                editor.indentLine(editor.getLineNumber(line), "smart");
            });
            function Load() {
                const event = new Event('change');
                let type = document.querySelector('.typeOfWorkInput');
                let tbinput = document.querySelector('.tbTwoInput');
                let editor1 = document.querySelector('.CodeMirror').CodeMirror;
                if (type.value == 1) {
                    tbinput.value = editor1.getValue();
                    let val = editor1.getValue();
                    tbinput.setAttribute('value', val );
                    tbinput.dispatchEvent(event);
                }
            }

            window.initializeDownloadButton = function (downloadButton) {
                downloadButton.addEventListener('click', function () {
                    Load();
                });
            }
        </script>
        <div class="add-file">
            <label for="file-input-file">
                <img src="images/add-file.svg">
            </label>
            @if(devFile != null)
            {
                <p>@devFile.fileName</p>
            }
            <InputFile id="file-input-file" class="file-input-file" type="file" name="file-input-file" OnChange="LoadFile" style="display:none;" />
        </div>
         
        <div class="slideshow-container2">

            <!-- Full-width images with number and caption text -->
            @foreach(var image in filesBase64)
            {
                <div class="mySlides fade">
                    <img src="data:@image.contentType;base64,@image.base64data">
                </div>
            }
            @if(filesBase64.Count() < 10)
            {
                <label for="file-input-programming">
                    <div class="mySlides fade">
                        <img src="images/image_placeholder.jpg">
                    </div>
                </label>
                <InputFile id="file-input-programming" type="file" name="file-input-programming" OnChange="OnChangeAny" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
            <a class="next" onclick="plusSlides(1)">&#10095;</a>

        </div>
        <br>

        <!-- The dots/circles -->
        <div style="text-align:center">
            @for (var i=1; i<filesBase64.Count() +2;i++)
            {
                <span class="dot" onclick="currentSlide(i)"></span>
            }
        </div>
        <script>
            var slideIndex = 1;
            showSlides(slideIndex);
            var inputFile = document.getElementsByClassName("file-input-file");
            // Next/previous controls
            function plusSlides(n) {
                showSlides(slideIndex += n);
            }

            // Thumbnail image controls
            function currentSlide(n) {
                showSlides(slideIndex = n);
            }

            function showSlides(n) {
                var i;
                var slides = document.getElementsByClassName("mySlides");
                var dots = document.getElementsByClassName("dot");
                if (n > slides.length) {
                    slideIndex = 1
                }
                if (n < 1) {
                    slideIndex = slides.length
                }
                for (i = 0; i < slides.length; i++) {
                    slides[i].style.display = "none";
                }
                for (i = 0; i < dots.length; i++) {
                    dots[i].className = dots[i].className.replace(" active", "");
                }
                slides[slideIndex - 1].style.display = "block";
                dots[slideIndex - 1].className += " active";
            }
            function autoResize(elem) {
                // elem.style.height = '100';
                // elem.style.height = (elem.scrollHeight+10) + 'px';
                let result_element = document.querySelector("#highlighting-content");
                // Handle final newlines (see article)
                if (elem.value[elem.value - 1] == "\n") {
                    elem.value += " ";
                }
                // Update code
                result_element.innerHTML = elem.value.replace(new RegExp("&", "g"), "&amp;").replace(new RegExp("<", "g"), "&lt;"); /* Global RegExp */
                // Syntax Highlight
                Prism.highlightElement(result_element);
            }
            function sync_scroll(element) {
                /* Scroll result to scroll coords of event - sync with textarea */
                let result_element = document.querySelector("#highlighting");
                // Get and set x and y
                result_element.scrollTop = element.scrollTop;
                result_element.scrollLeft = element.scrollLeft;
            }

            function check_tab(element, event) {
                let code = element.value;
                if (event.key == "Tab") {
                    /* Tab key pressed */
                    event.preventDefault(); // stop normal
                    let before_tab = code.slice(0, element.selectionStart); // text before tab
                    let after_tab = code.slice(element.selectionEnd, element.value.length); // text after tab
                    let cursor_pos = element.selectionStart + 1; // where cursor moves after tab - moving forward by 1 char to after tab
                    element.value = before_tab + "\t" + after_tab; // add tab char
                    // move cursor
                    element.selectionStart = cursor_pos;
                    element.selectionEnd = cursor_pos;
                    update(element.value); // Update text to include indent
                }
            }
        </script>
    </div>
    <div class="create-work-block" id="photography">
        <textarea class="addtext-development" @bind="editItem.TextBlockOne" placeholder="Добавьте текст..."></textarea>
        <div id="photos" class="photos">
            @if (imageOne == null && imageTwo == null && imageThree == null)
            {
                <div>
                    <label for="file-input1">
                        <img src="images/image_placeholder.jpg">
                    </label>
                    <InputFile id="file-input1" type="file" name="file1" OnChange="OnChangeFirst" accept="image/jpeg, image/png, image/gif" style="display:none;" />
                    <label for="file-input2">
                        <img src="images/image_placeholder.jpg ">
                    </label>
                    <InputFile id="file-input2" type="file" name="file2" OnChange="OnChangeSecond" accept="image/jpeg, image/png, image/gif" style="display:none;" />

                </div>
                <label class="vertical" for="file-input3">
                    <img src="images/image_placeholder2.jpg">
                </label>
                <InputFile id="file-input3" type="file" name="file3" OnChange="OnChangeThird" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            else
            {
                <div>
                    <label for="file-input1" class="horizontal-image">
                        @if (imageOne != null)
                        {
                            <img src="data:@imageOne.contentType;base64,@imageOne.base64data">
                        }
                        else
                        {
                            <img src="images/image_placeholder.jpg">
                        }
                    </label>
                    <InputFile id="file-input1" type="file" name="file1" OnChange="OnChangeFirst" accept="image/jpeg, image/png, image/gif" style="display:none;" />
                    <label for="file-input2" class="horizontal-image">
                        @if (imageTwo != null)
                        {
                            <img src="data:@imageTwo.contentType;base64,@imageTwo.base64data">
                        }
                        else
                        {
                            <img src="images/image_placeholder.jpg">
                        }
                    </label>
                    <InputFile id="file-input2" type="file" name="file2" OnChange="OnChangeSecond" accept="image/jpeg, image/png, image/gif" style="display:none;" />

                </div>
                <label class="vertical vertical-image" for="file-input3">
                    @if (imageThree != null)
                    {
                        <img src="data:@imageThree.contentType;base64,@imageThree.base64data">
                    }
                    else
                    {
                        <img src="images/image_placeholder.jpg">
                    }
                </label>
                <InputFile id="file-input3" type="file" name="file3" OnChange="OnChangeThird" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            
        </div>
    </div>
    <div class="create-work-block" id="designing">
        <textarea class="addtext-development" @bind="editItem.TextBlockOne" placeholder="Добавьте текст..."></textarea>
        <div class="slideshow-container3">

            <!-- Full-width images with number and caption text -->
            @foreach (var image in filesBase64)
            {
                <div class="mySlides2 fade">
                    <img src="data:@image.contentType;base64,@image.base64data">
                </div>
            }
            @if (filesBase64.Count < 10)
            {
                <label for="file-input-design">
                    <div class="mySlides2 fade">
                        <img src="images/image_placeholder2.jpg">
                    </div>
                </label>
                <InputFile id="file-input-design" type="file" name="file-input-design" OnChange="OnChangeAny" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            <a class="prev" onclick="plusSlidesDesigning(-1)">&#10094;</a>
            <a class="next" onclick="plusSlidesDesigning(1)">&#10095;</a>

        </div>
        <br>

        <!-- The dots/circles -->
        <div style="text-align:center">
            @for (var i = 1; i < filesBase64.Count + 2; i++)
            {
                <span class="dot2" onclick="currentSlideDesigning(i)"></span>
            }
        </div>
        <script>
            var slideIndex = 1;
            showSlidesDesigning(slideIndex);

            // Next/previous controls
            function plusSlidesDesigning(n) {
                showSlidesDesigning(slideIndex += n);
            }

            // Thumbnail image controls
            function currentSlideDesigning(n) {
                showSlidesDesigning(slideIndex = n);
            }

            function showSlidesDesigning(n) {
                var i;
                var slides = document.getElementsByClassName("mySlides2");
                var dots = document.getElementsByClassName("dot2");
                if (n > slides.length) {
                    slideIndex = 1
                }
                if (n < 1) {
                    slideIndex = slides.length
                }
                for (i = 0; i < slides.length; i++) {
                    slides[i].style.display = "none";
                }
                for (i = 0; i < dots.length; i++) {
                    dots[i].className = dots[i].className.replace(" active", "");
                }
                slides[slideIndex - 1].style.display = "block";
                dots[slideIndex - 1].className += " active";
            }
        </script>
    </div>

    <div class="create-work-block" id="another">
        <div class="article">
            <textarea class="article-text" @bind="editItem.TextBlockOne" placeholder="Добавьте текст..."></textarea>
            @if(imageOne == null)
            {
                <label for="file-input1">
                    <img src="images/image_placeholder.jpg" width="388" height="219">
                </label>
                <InputFile id="file-input1" type="file" name="file1" OnChange="OnChangeFirst" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            else
            {
                <img src="data:@imageOne.contentType;base64,@imageOne.base64data" width="388" height="219">

            }
        </div>
        <div class="article">
            @if (imageTwo == null)
            {
                <label for="file-input2">
                    <img src="images/image_placeholder.jpg" width="388" height="219">
                </label>
                <InputFile id="file-input2" type="file" name="file2" OnChange="OnChangeSecond" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            else
            {
                <img src="data:@imageTwo.contentType;base64,@imageTwo.base64data" width="388" height="219">

            }
            <textarea class="article-text" @bind="editItem.TextBlockTwo" placeholder="Добавьте текст..."></textarea>

        </div>
        <div class="article">
            <textarea class="article-text" @bind="editItem.TextBlockThree" placeholder="Добавьте текст..."></textarea>
            @if (imageThree == null)
            {
                <label for="file-input3">
                    <img src="images/image_placeholder.jpg" width="388" height="219">
                </label>
                <InputFile id="file-input3" type="file" name="file3" OnChange="OnChangeThird" accept="image/jpeg, image/png, image/gif" style="display:none;" />
            }
            else
            {
                <img src="data:@imageThree.contentType;base64,@imageThree.base64data" width="388" height="219">
            }
        </div>
    </div>

</section>
<input class="typeOfWorkInput" type="hidden" @onchange="InputType" id="type" name="type"></input>
<input class="categoryOfWorkInput" type="hidden" @onchange="InputCategory" id="category" name="category"></input>
<input class="tbTwoInput" type="hidden" @onchange="InputCode" id="tbtwo" name="tbtwo" />
<script>
    let dots = document.querySelectorAll('.layout-link');
    let active = document.querySelector('.layout-link.active') || dots[0];
    let type = document.querySelector('.typeOfWorkInput');
    let category = document.querySelector('.categoryOfWorkInput');
    let btns = document.querySelectorAll('.btnCategory');
    let activeCat = document.querySelector('.btnCategory.active') || btns[0];

    let buttonsSwitch = document.querySelectorAll('.btnCategory');

    for (let button of buttonsSwitch) {
        button.addEventListener('click', function () {
            toggleCategory(this);
        });
    }

    function toggleCategory(element) {
        let index = element.getAttribute('data-index'); // Получение значения атрибута data-index
        type.value = index; // Установка значения индекса в поле ввода
        type.setAttribute('value', index);
        type.dispatchEvent(event);// Триггер для обновления привязки данных Blazor
        activeCat.style.background = 'rgba(246, 142, 175, 1)';
        element.style.background = 'rgba(112, 85, 189, 1)';
        activeCat = element;
    }

    const event = new Event('change');
    for (let i = 0; i < dots.length; i++) {
        dots[i].addEventListener('click', function () {
            toggleActive(this);
        });
    }
    function toggleActive(element) {
        let index = element.getAttribute('data-index'); // Получение значения атрибута data-index
        category.value = index; // Установка значения индекса в поле ввода
        category.setAttribute('value', index);
        category.dispatchEvent(event);// Триггер для обновления привязки данных Blazor
        active.style.background = 'none';
        element.style.background = 'rgba(206, 203, 235, 1)';
        active = element;
    }  
</script>




@code {

    public class ImageFile
    {
        public string base64data { get; set; }
        public string contentType { get; set; }
        public string fileName { get; set; }
        public int WorkId { get; set; }
    }

    public class TagModel
    {
        public int TagId { get; set; }
        public int WorkId { get; set; }
        public string Title { get; set; }
    }

    private Work editItem = new Work();
    List<ImageFile> filesBase64 = new List<ImageFile>();
    ImageFile imageOne = null;
    ImageFile imageTwo = null;
    ImageFile imageThree = null;
    ImageFile devFile = null;
    IBrowserFile browserDevFile = null;

    string message = "InputFile Example";
    string tbCode;
    string categoryOfWork;
    string patternOfWork;
    string tags;
    private ElementReference downloadButton;
    bool IsCompleted = true;


    private string[] categoryNames = new string[]
    {
        "Аналитика",
        "Разработка",
        "Фотография",
        "UI/UX дизайн",
        "Графический дизайн",
        "Другое"
    };

    private string[] patternNames = new string[]
    {
        "Аналитика",
        "Разработка",
        "Фотография",
        "Дизайн",
        "Другое"
    };

    private async Task SaveItem()
    {
        if (!string.IsNullOrEmpty(editItem.Title) &&
            !string.IsNullOrEmpty(editItem.Description) &&
            !string.IsNullOrEmpty(categoryOfWork) &&
            !string.IsNullOrEmpty(patternOfWork) &&
            editItem.Title != null &&
            categoryOfWork != null &&
            patternOfWork != null &&
            editItem.Description != null)
        {
            IsCompleted = true;
        }
        else
        {
            IsCompleted = false;
        }

        if (IsCompleted)
        {
            editItem.CategoryOfWork = int.Parse(categoryOfWork);
            editItem.Published = DateTime.Now;
            editItem.PatternOfWork = int.Parse(patternOfWork);
            if (int.Parse(patternOfWork) == 1) editItem.TextBlockTwo = tbCode;
            try
            {
                await Http.PutAsJsonAsync<Work>("works/add", editItem);
                Console.WriteLine("work added");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding work: {ex.Message}");
                return; // Exit the method if adding work fails
            }

            if (int.Parse(patternOfWork) == 1 && browserDevFile != null)
            {
                try
                {
                    var fileContent = new StreamContent(browserDevFile.OpenReadStream());
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(browserDevFile.ContentType);
                    var content = new MultipartFormDataContent();
                    content.Add(fileContent, "file", browserDevFile.Name);
                    Console.WriteLine("file before added");

                    var response = await Http.PutAsync("works/putfile", content);
                    response.EnsureSuccessStatusCode(); // Throws if not a success code.

                    Console.WriteLine("file added");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error uploading file: {ex.Message}");
                    return; // Exit the method if uploading file fails
                }
            }

            try
            {
                await UploadImages();
                Console.WriteLine("image added");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading images: {ex.Message}");
                return; // Exit the method if uploading images fails
            }

            try
            {
                await AddTags();
                Console.WriteLine("tags added");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding tags: {ex.Message}");
                return; // Exit the method if adding tags fails
            }

            editItem = new Work();
            NavigationManager.NavigateTo("/profile", true);
        }
    }

    async Task UploadImages()
    {
        if (imageOne != null || imageTwo != null || imageThree != null || filesBase64.Count > 0)
        {
            if (filesBase64.Count == 0) filesBase64.AddRange(new List<ImageFile> { imageOne, imageTwo, imageThree });
            var works = await Http.GetFromJsonAsync<List<Work>>("works/my");
            var id = works.OrderByDescending(x => x.WorkId).First().WorkId;
            foreach (var file in filesBase64)
            {
                file.WorkId = id;
            }

            try
            {
                await Http.PutAsJsonAsync("works/put", filesBase64);
                Console.WriteLine("images uploaded successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading images: {ex.Message}");
                throw; // Rethrow the exception to be caught in the SaveItem method
            }

            filesBase64 = new List<ImageFile>();
            imageOne = null;
            imageTwo = null;
            imageThree = null;
        }
    }

    async Task AddTags()
    {
        var works = await Http.GetFromJsonAsync<List<Work>>("works/my");
        var id = works.OrderByDescending(x => x.WorkId).First().WorkId;
        List<string> Tags = tags.Split('#').ToList();
        Tags.RemoveAll(x => string.IsNullOrEmpty(x));
        List<TagModel> tagModels = new List<TagModel>();

        if (Tags.Count > 0)
        {
            foreach (var tag in Tags)
            {
                tagModels.Add(new TagModel
                    {
                        WorkId = id,
                        Title = tag.Trim()
                    });
            }

            try
            {
                await Http.PutAsJsonAsync("works/addtags", tagModels);
                Console.WriteLine("tags added successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding tags: {ex.Message}");
                throw; // Rethrow the exception to be caught in the SaveItem method
            }
        }
    }

    async Task LoadFile(InputFileChangeEventArgs e)
    {
        editItem.PatternOfWork = int.Parse(patternOfWork);
        if (editItem.PatternOfWork == 1)
        {
            browserDevFile = e.File;
            var buf = new byte[browserDevFile.Size];
            using (var stream = browserDevFile.OpenReadStream())
            {
                await stream.ReadAsync(buf);
            }
            devFile = new ImageFile { base64data = Convert.ToBase64String(buf), contentType = browserDevFile.ContentType, fileName = browserDevFile.Name };
            Console.WriteLine("OK");
        }
    }

    async Task OnChangeAny(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 1366, 768); //resize the image
        var buf = new byte[resizedFile.Size];
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf);
        }
        filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name });
    }

    async Task OnChangeFirst(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 1366, 768); //resize the image
        var buf = new byte[resizedFile.Size];
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf);
        }
        imageOne = new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name };
    }

    async Task OnChangeSecond(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 1366, 768); //resize the image
        var buf = new byte[resizedFile.Size];
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf);
        }
        imageTwo = new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name };
    }

    async Task OnChangeThird(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 1366, 768); //resize the image
        var buf = new byte[resizedFile.Size];
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf);
        }
        imageThree = new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name };
    }

    private async Task InputCode(Microsoft.AspNetCore.Components.ChangeEventArgs patharg)
    {
        tbCode = (string)patharg.Value;

    }
    private async Task InputType(Microsoft.AspNetCore.Components.ChangeEventArgs patharg)
    {
        categoryOfWork = (string)patharg.Value;

    }
    private async Task InputCategory(Microsoft.AspNetCore.Components.ChangeEventArgs patharg)
    {
        patternOfWork = (string)patharg.Value;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeDownloadButton", downloadButton);
        }
    }
    
}
